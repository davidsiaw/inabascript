using System.Collections.Generic;
using InabaScript;
using System.Diagnostics;
using StatementList = System.Collections.Generic.List<InabaScript.IStatement>;
using VarList = System.Collections.Generic.List<InabaScript.VariableDeclaration>;
using ExpressionList = System.Collections.Generic.List<InabaScript.IExpression>;

COMPILER InabaScript

/* Add auxiliary methods and declaration here. */

public Scope endScope = new Scope();
public StatementList statements = new StatementList();

bool IsPartOfType()
{
	Token next = scanner.Peek();
	return la.kind == _arrow && next.kind != _ident;
}

/* If you want your generated compiler case insensitive add the */
/* keyword IGNORECASE here. */

CHARACTERS
/* Add character set declarations here. */
capitalLetter = 'A'..'Z'.
smallLetter = 'a'..'z'.
letter = capitalLetter + smallLetter.
digit = "0123456789".
cr = '\r'.
lf = '\n'.
tab = '\t'.
underscore = '_'.
validInitialTypeChars = capitalLetter.
validInitialIdentChars = smallLetter.
validSubsequentIdentChars = underscore + letter + digit.
openBrace = '{'.
closeBrace = '}'.
openParens = '('.
closeParens = ')'.
openBracket = '['.
closeBracket = ']'.
negative = '-'.
validStringChars = letter + digit + "!｣:$^&*()_+-=,./;[]ｩｮ<>?#:@~{}|".

TOKENS
/* Add token declarations here. */
ident = validInitialIdentChars {validSubsequentIdentChars}.
typeident = validInitialTypeChars {validSubsequentIdentChars}.
integer = [negative] digit {digit}.
float = digit {digit} '.' digit {digit}.
utf8bom = '\u00ef' '\u00bb' '\u00bf'.
validStringLiteral = '"' { validStringChars | ('\\' ('n'|'r'|'r'|'\\') ) } '"'.
colon = ':'.
arrow = '-' '>'.

PRAGMAS
/* Add pragma declarations here. */
/* Example: */
/*   switch = '$' { digit | letter }. (. Optional semantic action .) */


/* For a multi-line block comment: */
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf


/* Set the ignored characters (whitespaces) here, the blank character is */
/* ignored by default. */
/* Example, add line breaks to the ignore set. */
IGNORE cr + lf + tab


PRODUCTIONS



IntegerRange<Scope scope, out IntegerRange range> =
(
	integer																			(. long min = long.Parse(t.val); long max = long.Parse(t.val); .)
	[
		".." 
		integer																		(. max = long.Parse(t.val); .)
	]
																					(. range = new IntegerRange(min, max); .)
)
.

IntegerLiteral<Scope scope, out IExpression expr> =									(. IntegerRange range; .)
IntegerRange<scope, out range>														(. expr = range; .)
.

ArrayLiteral<Scope scope, out IExpression expr> =									(. IExpression innerExpr; .)
"["																					(. List<IExpression> innerExprs = new List<IExpression>(); .)
[																					
	Expression<scope, out innerExpr>												(. innerExprs.Add(innerExpr); .)
	{
		"," Expression<scope, out innerExpr>										(. innerExprs.Add(innerExpr); .)
	}
]
"]"																					(. expr = new ArrayLiteral(innerExprs); .)
.


Primary<Scope scope, out IExpression expr> =										(. IType type = new UnknownType(); .)
																					(. string name = ""; .)
																					(. expr = null; .)
																					(. IExpression rhs; .)
(
	(
		ident																		(. name = t.val; .)
		(
			[
				(
					":"
					TypeIdentifier<scope, out type>									(. VariableDeclaration vd = new VariableDeclaration(name, type); .)
																					(. MultiVariableDeclaration parmDecl = new MultiVariableDeclaration(new List<VariableDeclaration>(new VariableDeclaration[] {vd}), null); .)
					FunctionReturnDefinition<scope, out expr, parmDecl>
				)
				|
				(
																					(. VariableDeclaration vd = new VariableDeclaration(name, type); .)
																					(. MultiVariableDeclaration parmDecl = new MultiVariableDeclaration(new List<VariableDeclaration>(new VariableDeclaration[] {vd}), null); .)
					FunctionReturnDefinition<scope, out expr, parmDecl>
				)
			]
			[
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
				Expression<scope, out rhs>											(. expr = new FunctionCall(expr, rhs); .)
			]
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
		)
	)
	|
	(
		"("																			(. VarList vl = new VarList(); .)
		(
			StillPrimary<scope, out expr, vl> | ")"
		)
	)
)

.


StillPrimary<Scope scope, out IExpression expr, VarList vl> =						(. IType type = new UnknownType(); .)
																					(. string name = ""; .)
																					(. expr = null; .)
																					(. IExpression rhs; .)
(
	(
		ident																		(. name = t.val; .)
		(
		  (
			")"
			[																		
																					(. VariableDeclaration newestParam = new VariableDeclaration(name, type); .)
																					(. vl.Add(newestParam); .)
																					(. MultiVariableDeclaration parmDecl = new MultiVariableDeclaration(vl, null); .)
				FunctionReturnDefinition<scope, out expr, parmDecl>
			]
			[
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
				Expression<scope, out rhs>											(. expr = new FunctionCall(expr, rhs); .)
			]
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
		  )
		| (
			(
				":" 
				TypeIdentifier<scope, out type>										(. VariableDeclaration newestParam = new VariableDeclaration(name, type); .)
																					(. vl.Add(newestParam); .)
																					(. MultiVariableDeclaration parmDecl = new MultiVariableDeclaration(vl, null); .)
				(
					(
						FunctionReturnDefinition<scope, out expr, parmDecl>
						(
							(
								")"
								[
									Expression<scope, out rhs>						(. expr = new FunctionCall(expr, rhs); .)
								]
							)
							|
							(
								Expression<scope, out rhs>							(. expr = new FunctionCall(expr, rhs); .)
								(
									")"	| 
									(
																					(. ExpressionList el = new ExpressionList(); .)
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
																					(. el.Add(expr); .)
										"," Secondary<scope, el, out expr>
									)
								)
							)
							|
							(
																					(. ExpressionList el = new ExpressionList(); .)
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
																					(. el.Add(expr); .)
								("," Secondary<scope, el, out expr>)
							)
						)
					)
					|
					(
						")" FunctionReturnDefinition<scope, out expr, parmDecl>
						(
							(
								[
									Expression<scope, out rhs>						(. expr = new FunctionCall(expr, rhs); .)
								]
								[
																					(. ExpressionList el = new ExpressionList(); .)
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
																					(. el.Add(expr); .)
									("," Secondary<scope, el, out expr>)
								]
							)
							
						)
					)
					|
					(
																					(. VariableDeclaration vd; .)
						NextNomination<ref scope, out vd>
						FunctionReturnDefinition<scope, out expr, parmDecl>
						[
							Expression<scope, out rhs>								(. expr = new FunctionCall(expr, rhs); .)
						]
					)
				)
			)
			)
		| (
			","																		(. vl.Add(new VariableDeclaration(name, type)); .)
			StillPrimary<scope, out expr, vl>
		  )
		| (																			(. VariableDeclaration newestParam = new VariableDeclaration(name, type); .)
																					(. vl.Add(newestParam); .)
																					(. MultiVariableDeclaration parmDecl = new MultiVariableDeclaration(vl, null); .)
			FunctionReturnDefinition<scope, out expr, parmDecl> 
			(
				(
					")"
					Expression<scope, out rhs>										(. expr = new FunctionCall(expr, rhs); .)
				)
				|
				(
					[","]
																					(. ExpressionList el = new ExpressionList(); .)
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
																					(. el.Add(expr); .)
					Secondary<scope, el, out expr>
				)
			)
		  )
		)
	)
	|
	(
		(
			IntegerLiteral<scope, out expr>
			| ArrayLiteral<scope, out expr>
		)
																					(. ExpressionList el = new ExpressionList(); .)
																					(. expr = expr ?? (IExpression)scope.GetDeclarationFor(name); .)
																					(. el.Add(expr); .)
		[ "," Secondary<scope, el, out expr>]
	)
)
.


NextNomination<ref Scope scope, out VariableDeclaration varDecl> =
"," SingleVarNomination<ref scope, out varDecl, true>
(
	NextNomination<ref scope, out varDecl>
|
	")"
)
.


Secondary<Scope scope, ExpressionList el, out IExpression expr> =
Expression<scope, out expr>															(. el.Add(expr); .)
(	
	(
		"," Secondary<scope, el, out expr>
	)
	|
	(
		")"																			(. expr = new TupleExpression(el); .)
	)
)
.



FunctionReturnDefinition<Scope scope, out IExpression expr, MultiVariableDeclaration parmDecl> =
																					(. MultiVariableDeclaration retDecl; .)
																					(. Scope funcScope = new Scope(scope); .)
																					(. StatementList stmts = new StatementList(); .)
arrow																				(. VariableDeclaration.Scopify(ref funcScope, parmDecl.Declarations); .)
VarNomination<ref funcScope, out retDecl, true>
"{"
{Statement<ref funcScope, stmts>}
"}"
																					(. expr = new FunctionLiteral(retDecl, parmDecl, stmts); .)
.


Expression<Scope scope, out IExpression expr> =										(. expr = null; .)
																					(. scope = new Scope(scope); .)
(
	IntegerLiteral<scope, out expr> |
	ArrayLiteral<scope, out expr> |
	Primary<scope, out expr>
)
.

LiteralType<Scope scope, out IType type> = 
typeident																			(. type = scope.GetTypeDeclaration(t.val); .)
.

IntegerRangeAsType<Scope scope, out IntegerType type> =								(. IntegerRange range; .)
IntegerRange<scope, out range>														(. type = new IntegerType(range.min, range.max); .)
.

IntegerTypeDeclaration<Scope scope, out IType type> =								(. IntegerType intType; .)
"Int" "{"
IntegerRangeAsType<scope, out intType>												(. type = intType; .)
"}"
.

TupleType<Scope scope, out IType type> =											(. IType innerType; .)
"("																					(. List<IType> types = new List<IType>(); .)
[
	TypeIdentifier<scope, out innerType>											(. types.Add(innerType); .)
	{
		"," TypeIdentifier<scope, out innerType>									(. types.Add(innerType); .)
	}
]
")"
																					(. type = new TupleType(types); .)
.

ArrayType<Scope scope, out IType type> =											(. IType innerType; .)
																					(. IntegerType sizeType; .)
"["
TypeIdentifier<scope, out innerType>
"<"
IntegerRangeAsType<scope, out sizeType>
">"
"]"																					(. type = new ArrayType(innerType, sizeType); .)
.

FirstOrderTypeIdentifier<Scope scope, out IType type> =								(. type = null; .)
(
	TupleType<scope, out type> |
	IntegerTypeDeclaration<scope, out type> |
	LiteralType<scope, out type> |
	ArrayType<scope, out type>
)
.

TypeIdentifier<Scope scope, out IType type> =										(. type = null; .)
FirstOrderTypeIdentifier<scope, out type>
[IF(IsPartOfType())																	(. IType returnType; .)
	arrow TypeIdentifier<scope, out returnType>										(. type = new FunctionType(type, returnType); .)
]
.

SingleVarNomination<ref Scope scope, out VariableDeclaration varDecl, bool decl> =	(. IType type = new UnknownType(); .)
																					(. varDecl = null; .)

ident																				(. string name = t.val; .)
[
":"
TypeIdentifier<scope, out type>														(. varDecl = new VariableDeclaration(name, type); .)
																					(. scope = new Scope(scope, varDecl); .)
]
																					(. varDecl = varDecl ?? VariableDeclaration.Find(ref scope, varDecl, name, decl); .)
.

VarNomination<ref Scope scope, out MultiVariableDeclaration mvd, bool decl> =
																					(. VariableDeclaration varDecl; .)
																					(. List<VariableDeclaration> vars = new List<VariableDeclaration>(); .)
(
	SingleVarNomination<ref scope, out varDecl, decl>								(. vars.Add(varDecl); .)
	| (
		"("
		SingleVarNomination<ref scope, out varDecl, decl>							(. vars.Add(varDecl); .)
		{
			"," SingleVarNomination<ref scope, out varDecl, decl>					(. vars.Add(varDecl); .)
		}
		")"
	)
)
																					(. mvd = new MultiVariableDeclaration(vars, null); .)
.


Initializer<Scope scope, out IExpression expr> =
"="
Expression<scope, out expr>
.


VarAssignment<ref Scope scope, out IStatement stmt> =								(. MultiVariableDeclaration mvd; .)
																					(. IExpression expr = null; .)
																					(. IExpression rhs = null; .)
																					(. VariableDeclaration vd = null; .)
																					(. stmt = null; .)
(
(
	"var" 
	VarNomination<ref scope, out mvd, true>
	Initializer<scope, out expr>													(. stmt = new MultiVariableDeclaration(mvd.Declarations, expr); .)
)
|
(
	SingleVarNomination<ref scope, out vd, false>
	(
		(
			Initializer<scope, out expr>											(. stmt = new MultiVariableDeclaration(new List<VariableDeclaration>(new VariableDeclaration[]{ vd }), expr); .)
		)
		| 
		(
			Expression<scope, out rhs>												(. stmt = new FunctionCall(vd, rhs); .)
		)
	)
)
|
(
	VarNomination<ref scope, out mvd, false>
	Initializer<scope, out expr>													(. stmt = new MultiVariableDeclaration(mvd.Declarations, expr); .)
)
)
.


VarDeclaration<ref Scope scope, out IStatement stmt> =								(. stmt = null; .)
																					(. bool decl = false; .)
(
	VarAssignment<ref scope, out stmt>
)
.


SetSymbol<ref Scope scope, out ISetMember elem> =									(. elem = null; .)
(
	(ident)																			(. elem = new Symbol(t.val); .)
)
.

SetDeclaration<ref Scope scope, out IStatement stmt> =								(. List<ISetMember> elements = new List<ISetMember>(); .)
																					(. ISetMember symbol; .)
"set"
typeident																			(. string name = t.val; .)
"="
SetSymbol<ref scope, out symbol>													(. elements.Add(symbol); .)
																					(. scope = new Scope(scope, (IDeclaration)symbol); .)
{
	"|" SetSymbol<ref scope, out symbol>											(. elements.Add(symbol); .)
																					(. scope = new Scope(scope, (IDeclaration)symbol); .)
}
																					(. SetDeclaration set = new SetDeclaration(name, elements); .)
																					(. stmt = set; .)
																					(. scope = new Scope(scope, set); .)
.


Statement<ref Scope scope, StatementList stmts> =									(. IStatement stmt; .)
(
	SetDeclaration<ref scope, out stmt>												(. stmts.Add(stmt); .)
|	VarDeclaration<ref scope, out stmt>												(. stmts.Add(stmt); .)
)
";"	SYNC
.

InabaScript =																		(.  .)
[utf8bom]
{Statement<ref endScope, statements>}
.

END InabaScript.

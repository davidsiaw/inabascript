
using System.Collections.Generic;

COMPILER InabaScript

/* Add auxiliary methods and declaration here. */

internal static InabaScriptSource iss;
static int anonfunc = 0;
    
/* If you want your generated compiler case insensitive add the */
/* keyword IGNORECASE here. */


CHARACTERS
/* Add character set declarations here. */
capitalLetter = 'A'..'Z'.
smallLetter = 'a'..'z'.
letter = capitalLetter + smallLetter.
digit = "0123456789".
cr = '\r'.
lf = '\n'.
tab = '\t'.
underscore = '_'.
validInitialTypeChars = capitalLetter.
validInitialIdentChars = smallLetter.
validSubsequentIdentChars = underscore + letter + digit.
openBrace = '{'.
closeBrace = '}'.
openParens = '('.
closeParens = ')'.
openBracket = '['.
closeBracket = ']'.
validStringChars = letter + digit + "!£:$^&*()_+-=,./;[]©®<>?#:@~{}|".

TOKENS
/* Add token declarations here. */
ident = validInitialIdentChars {validSubsequentIdentChars}.
type = validInitialTypeChars {validSubsequentIdentChars}.
integer = digit {digit}.
float = digit {digit} '.' digit {digit}.
utf8bom = '\u00ef' '\u00bb' '\u00bf'.
validStringLiteral = '"' { validStringChars | ('\\' ('n'|'r'|'r'|'\\') ) } '"'.
colon = ':'.

PRAGMAS
/* Add pragma declarations here. */
/* Example: */
/*   switch = '$' { digit | letter }. (. Optional semantic action .) */


/* For a multi-line block comment: */
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf


/* Set the ignored characters (whitespaces) here, the blank character is */
/* ignored by default. */
/* Example, add line breaks to the ignore set. */
IGNORE cr + lf + tab


PRODUCTIONS

/* Add your productions here, one must have the same name as the grammar, */
/* it will be the start symbol (entry point of your compiler). */


Identifier<out string ident> =
ident													(. ident = t.val; .)
.


String<out string str> = 
validStringLiteral										(. str = t.val.Substring(1, t.val.Length - 2); .)
.


FunctionParamsAndBody<out FunctionBody body, Scope scope> =			
														(. string ident; .)
														(. IStatement stmt; .)
														(. List<VariableDeclaration> parameters = new List<VariableDeclaration>(); .)
														(. List<IStatement> statements = new List<IStatement>(); .)
														(. VariableDeclaration vd; .)
"("
[
Identifier<out ident>									(. vd = new VariableDeclaration(ident, new ParameterType());
														   parameters.Add(vd); 
														   scope = new Scope(vd, scope);	.)
{","													

Identifier<out ident>									(. vd = new VariableDeclaration(ident, new ParameterType());
														   parameters.Add(vd); 
														   scope = new Scope(vd,scope);	.)
}
]
")"
"{"
{ 
Statement<out stmt, ref scope>							(. statements.Add(stmt); .)
}
[ReturnStatement<out stmt, ref scope>]				(. statements.Add(stmt); .)
"}"														(. body = new FunctionBody(parameters, statements, scope); .)
.



FunctionDeclaration<out FunctionDeclaration funcdecl, ref Scope scope> =	
														(. string ident = "anon" + anonfunc ; anonfunc++; .)
"function"												(. FunctionBody body; .)
[
Identifier<out ident>
]
FunctionParamsAndBody<out body, scope>					(. funcdecl = new FunctionDeclaration(ident, body); .)
														(. scope = new Scope(funcdecl, scope); .)
.														



Expression<out IExpression expr, ref Scope scope> =		(. IExpression rhs; .)
														(. string op; .)
														
Term<out expr, ref scope>											
{
(
"+"														(. op = "(+)"; .)
| 
"-"														(. op = "(-)"; .)
)												
Term<out rhs, ref scope>								(. expr = new FunctionCall(new Identifier(op, scope), expr, rhs); .)
}
.

Term<out IExpression expr, ref Scope scope> =			(. IExpression rhs; .)
														(. string op; .)
														
Factor<out expr, ref scope>											
{
(
"*"														(. op = "(*)"; .)
| 
"/"														(. op = "(/)"; .)
)												
Factor<out rhs, ref scope>								(. expr = new FunctionCall(new Identifier(op, scope), expr, rhs); .)
}
.

Factor<out IExpression expr, ref Scope scope> =			(. IExpression rhs; string ident;.)

InnerReferencable<out expr, ref scope>								
{
"."														(. expr = new InnerReference(expr); .)
Identifier<out ident>									(. (expr as InnerReference).SetMemberIdent(ident); .)
}
.

InnerReferencable<out IExpression expr, ref Scope scope> =
														(. expr = null; string str = null;.)
														(. List<IExpression> callers; .)
														(. ObjectDeclaration obj; .)
(
float													(. expr = new FloatLiteral(t.val); .)
| integer												(. expr = new IntegerLiteral(t.val); .)
| String<out str>										(. expr = new StringLiteral(str); .)
| ObjectDeclaration<out obj, ref scope>						(. expr = obj; .)
| Referencer<out expr, ref scope>
	[
	Caller<out callers, ref scope>							(. expr = new FunctionCall(expr, callers); .)
	]
)
.

ObjectDeclaration<out ObjectDeclaration obj, ref Scope scope> =
															(. obj = new ObjectDeclaration(); .)
															(. VariableDeclaration vardecl; .)
"{"
[
	MemberDeclaration<out vardecl, ref scope>				(. obj.AddMember(vardecl); .)
	{( ","
	MemberDeclaration<out vardecl, ref scope>				(. obj.AddMember(vardecl); .)
	)}
]
"}"
.

MemberDeclaration<out VariableDeclaration vardecl, ref Scope scope> =	
														(. IExpression expr = null; .)
														(. string ident; .)
Identifier<out ident>
":"
Expression<out expr, ref scope>							(. vardecl = new VariableDeclaration(ident, expr); .)												
.

Referencer<out IExpression expr, ref Scope scope> =		(. FunctionDeclaration funcdecl; .)
														(. string ident; .)
														(. expr = null; .)
(
	( "(" Expression<out expr, ref scope> ")" )
	| FunctionDeclaration<out funcdecl, ref scope>		(. expr = funcdecl; .)
	| Identifier<out ident>								(. expr = new Identifier(ident, scope); .)
)
.

Caller<out ExpressionList callers, ref Scope scope> =	(. IExpression expr; .)
"("														(. callers = new List<IExpression>(); .)
	[
		Expression<out expr, ref scope>						(. callers.Add(expr); .)
		{( "," 
		Expression<out expr, ref scope>						(. callers.Add(expr); .)
		)}
	]
")"	
.


VariableDeclaration<out VariableDeclaration vardecl, ref Scope scope> =	
														(. IExpression expr = null; .)
"var"													(. string ident; .)
Identifier<out ident>
[
"="
(Expression<out expr, ref scope>)
]
";"														(. vardecl = new VariableDeclaration(ident, expr); .)
														(. scope = new Scope(vardecl, scope); .)
.


FunctionCall<out FunctionCall funccall, ref Scope scope>	=
														(. IExpression expr; .)
														(. List<IExpression> callers; .)
Referencer<out expr, ref scope>		
Caller<out callers, ref scope>								(. funccall = new FunctionCall(expr, callers); .)														
.

ReturnStatement<out ReturnStatement retstmt, ref Scope scope> =
														(. IExpression expr; .)
"return"
Expression<out expr, ref scope>
";"														(. retstmt = new ReturnStatement(expr); .)
.



TypeDeclaration<out TypeDeclaration typedecl, ref Scope scope> =	(. string ident; .)
																	(. VariableDeclaration vardecl; .)
"type"
Identifier<out ident>												(. typedecl = new TypeDeclaration(ident); .)
																	(. scope = new Scope(typedecl, scope); .)
"="
"{" 
Identifier<out ident>												(. vardecl = new VariableDeclaration(ident, typedecl.Type); .)
																	(. typedecl.Add(ident); .)
																	(. scope = new Scope(vardecl, scope); .)

{
"," Identifier<out ident>											(. vardecl = new VariableDeclaration(ident, typedecl.Type); .)
																	(. typedecl.Add(ident); .)
																	(. scope = new Scope(vardecl, scope); .)
}
"}"
";"
.

Statement<out IStatement stmt, ref Scope scope> =		(. FunctionDeclaration funcdecl; .)
														(. VariableDeclaration vardecl; .)
														(. ReturnStatement retstmt; .)
														(. FunctionCall funccall; .)
														(. TypeDeclaration typedecl; .)
														(. stmt = null; .)
(
VariableDeclaration<out vardecl, ref scope>				(. stmt = vardecl; .)
| FunctionDeclaration<out funcdecl, ref scope>			(. stmt = funcdecl; .)
| FunctionCall<out funccall, ref scope> ";"				(. stmt = funccall; .)
| TypeDeclaration<out typedecl, ref scope>				(. stmt = typedecl; .)
)
.


/* InabaScript, like JavaScript is just a bunch of statements */
InabaScript =
														(. IStatement stmt; .)
														(. Scope scope = iss.scope; .)
[utf8bom]
{ 
SYNC Statement<out stmt, ref scope>						(. iss.stmts.Add(stmt); .)
}							
														(. iss.scope = scope; .)
.

END InabaScript.